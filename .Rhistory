main = "S3")
#s4
plot(resIrisModS4$V1,
col = colors[resIrisModS4$V2],
pch = 19,
xlab = "Instancias",
ylab = "Valores",
main = "S4")
#v1
plot(resIrisModV1$V1,
col = colors[resIrisModV1$V2],
pch = 19,
xlab = "Instancias",
ylab = "Valores",
main = "v1")
#v2
plot(resIrisModV2$V1,
col = colors[resIrisModV2$V2],
pch = 19,
xlab = "Instancias",
ylab = "Valores",
main = "v2")
#v3
plot(resIrisModV3$V1,
col = colors[resIrisModV3$V2],
pch = 19,
xlab = "Instancias",
ylab = "Valores",
main = "v3")
#v4
plot(resIrisModV4$V1,
col = colors[resIrisModV4$V2],
pch = 19,
xlab = "Instancias",
ylab = "Valores",
main = "v4")
p1 <- pimam
p1[,1] <-  log10(p1[,1])
p1[,2] <-  sqrt(p1[,2])
p1[,3] <-  (p1[,3])^2
p1[,4] <-  (p1[,4])^(1/3)
#set.seed(123)
#library(VGAM)
source("funciones.R")
#%%%%%%%%%%%%%%%%% PIMA MODIFICADO %%%%%%%%%%%%%%%%%%%%%%
# S1
aPimaModS1 <- perceptron(p1,o,"s1") #ejecutando la función con los datos de Iris.
resPimaModS1 <- as.data.frame(cbind(aPimaModS1,pima[,5])) #data.frame que contiene los valores resultado de la función de activación del perceptrón y el valor de la variable objetivo en la base de datos Iris.
resPimaModS1$V2 <- as.factor(resPimaModS1$V2)
# S2
aPimaModS2 <- perceptron(p1,o,"s2")
resPimaModS2 <- as.data.frame(cbind(aPimaModS2,pima[,5]))
resPimaModS2$V2 <- as.factor(resPimaModS2$V2)
# S3
aPimaModS3 <- perceptron(p1,o,"s3")
resPimaModS3 <- as.data.frame(cbind(aPimaModS3,pima[,5]))
resPimaModS3$V2 <- as.factor(resPimaModS3$V2)
# S4
aPimaModS4 <- perceptron(p1,o,"s4")
resPimaModS4 <- as.data.frame(cbind(aPimaModS4,pima[,5]))
resPimaModS4$V2 <- as.factor(resPimaModS4$V2)
# V1
aPimaModV1 <- perceptron(p1,o,"v1")
resPimaModV1 <- as.data.frame(cbind(aPimaModV1,pima[,5]))
resPimaModV1$V2 <- as.factor(resPimaModV1$V2)
# V2
aPimaModV2 <- perceptron(p1,o,"v2")
resPimaModV2 <- as.data.frame(cbind(aPimaModV2,pima[,5]))
resPimaModV2$V2 <- as.factor(resPimaModV2$V2)
# V3
aPimaModV3 <- perceptron(p1,o,"v3")
resPimaModV3 <- as.data.frame(cbind(aPimaModV3,pima[,5]))
resPimaModV3$V2 <- as.factor(resPimaModV3$V2)
# V4
aPimaModV4 <- perceptron(p1,o,"v4")
resPimaModV4 <- as.data.frame(cbind(aPimaModV4,pima[,5]))
resPimaModV4$V2 <- as.factor(resPimaModV4$V2)
#### GRÁFICAS
colors <- c("#e5b020", "#c9266a")
par(mfrow=c(2,4))
# S1
plot(resPimaModS1$V1,
col = colors[resPimaModS1$V2],
pch = 19,
xlab = "Instancias",
ylab = "Valores",
main = "S1")
#S2
plot(resPimaModS2$V1,
col = colors[resPimaModS2$V2],
pch = 19,
xlab = "Instancias",
ylab = "Valores",
main = "S2")
#s3
plot(resPimaModS3$V1,
col = colors[resPimaModS3$V2],
pch = 19,
xlab = "Instancias",
ylab = "Valores",
main = "S3")
#s4
plot(resPimaModS4$V1,
col = colors[resPimaModS4$V2],
pch = 19,
xlab = "Instancias",
ylab = "Valores",
main = "S4")
#v1
plot(resPimaModV1$V1,
col = colors[resPimaModV1$V2],
pch = 19,
xlab = "Instancias",
ylab = "Valores",
main = "v1")
#v2
plot(resPimaModV2$V1,
col = colors[resPimaModV2$V2],
pch = 19,
xlab = "Instancias",
ylab = "Valores",
main = "v2")
#v3
plot(resPimaModV3$V1,
col = colors[resPimaModV3$V2],
pch = 19,
xlab = "Instancias",
ylab = "Valores",
main = "v3")
#v4
plot(resPimaModV4$V1,
col = colors[resPimaModV4$V2],
pch = 19,
xlab = "Instancias",
ylab = "Valores",
main = "v4")
so1 <- sonarm
so1[,1] <-  log10(so1[,1])
so1[,2] <-  log10(so1[,2])
so1[,3] <-  log10(so1[,3])
so1[,4] <-  log10(so1[,4])
#so1 <- sonarm
#so1[,1] <-  log10(so1[,1])
#so1[,2] <-  sqrt(so1[,2])
#so1[,3] <-  (so1[,3])^2
#so1[,4] <-  (so1[,4])^(1/3)
#set.seed(123)
#library(VGAM)
source("funciones.R")
#%%%%%%%%%%%%%%%%% SONAR MODIFICADO %%%%%%%%%%%%%%%%%%%%%%
# S1
aSonarModS1 <- perceptron(so1,o,"s1") #ejecutando la función con los datos de Iris.
resSonarModS1 <- as.data.frame(cbind(aSonarModS1,sonar[,5])) #data.frame que contiene los valores resultado de la función de activación del perceptrón y el valor de la variable objetivo en la base de datos Iris.
resSonarModS1$V2 <- as.factor(resSonarModS1$V2)
# S2
aSonarModS2 <- perceptron(so1,o,"s2")
resSonarModS2 <- as.data.frame(cbind(aSonarModS2,sonar[,5]))
resSonarModS2$V2 <- as.factor(resSonarModS2$V2)
# S3
aSonarModS3 <- perceptron(so1,o,"s3")
resSonarModS3 <- as.data.frame(cbind(aSonarModS3,sonar[,5]))
resSonarModS3$V2 <- as.factor(resSonarModS3$V2)
# S4
aSonarModS4 <- perceptron(so1,o,"s4")
resSonarModS4 <- as.data.frame(cbind(aSonarModS4,sonar[,5]))
resSonarModS4$V2 <- as.factor(resSonarModS4$V2)
# V1
aSonarModV1 <- perceptron(so1,o,"v1")
resSonarModV1 <- as.data.frame(cbind(aSonarModV1,sonar[,5]))
resSonarModV1$V2 <- as.factor(resSonarModV1$V2)
# V2
aSonarModV2 <- perceptron(so1,o,"v2")
resSonarModV2 <- as.data.frame(cbind(aSonarModV2,sonar[,5]))
resSonarModV2$V2 <- as.factor(resSonarModV2$V2)
# V3
aSonarModV3 <- perceptron(so1,o,"v3")
resSonarModV3 <- as.data.frame(cbind(aSonarModV3,sonar[,5]))
resSonarModV3$V2 <- as.factor(resSonarModV3$V2)
# V4
aSonarModV4 <- perceptron(so1,o,"v4")
resSonarModV4 <- as.data.frame(cbind(aSonarModV4,sonar[,5]))
resSonarModV4$V2 <- as.factor(resSonarModV4$V2)
#### GRÁFICAS
colors <- c("#2664c9", "#acb5b7")
par(mfrow=c(2,4))
# S1
plot(resSonarModS1$V1,
col = colors[resSonarS1$V2],
pch = 19,
xlab = "Instancias",
ylab = "Valores",
main = "S1")
#S2
plot(resSonarModS2$V1,
col = colors[resSonarModS2$V2],
pch = 19,
xlab = "Instancias",
ylab = "Valores",
main = "S2")
#s3
plot(resSonarModS3$V1,
col = colors[resSonarModS3$V2],
pch = 19,
xlab = "Instancias",
ylab = "Valores",
main = "S3")
#s4
plot(resSonarModS4$V1,
col = colors[resSonarModS4$V2],
pch = 19,
xlab = "Instancias",
ylab = "Valores",
main = "S4")
#v1
plot(resSonarModV1$V1,
col = colors[resSonarModV1$V2],
pch = 19,
xlab = "Instancias",
ylab = "Valores",
main = "v1")
#v2
plot(resSonarModV2$V1,
col = colors[resSonarModV2$V2],
pch = 19,
xlab = "Instancias",
ylab = "Valores",
main = "v2")
#v3
plot(resSonarModV3$V1,
col = colors[resSonarModV3$V2],
pch = 19,
xlab = "Instancias",
ylab = "Valores",
main = "v3")
#v4
plot(resSonarModV4$V1,
col = colors[resSonarModV4$V2],
pch = 19,
xlab = "Instancias",
ylab = "Valores",
main = "v4")
library(mlbench)
#Cargando
data("PimaIndiansDiabetes")
pima <- PimaIndiansDiabetes
rm(PimaIndiansDiabetes)
#pima <- pima[1:150,c(1:4,9)]
#Preparando
pimam <- as.matrix(pima[,-9])
pimam <- scale(pimam)
o0 <-matrix(c(0.5,0.1,1,0.8,0.4,0.6,0.7,0.2), ncol = 8, nrow = 1)
#o0 <-matrix(c(0.25,0.32,0.30,0.28,0.26,0.35,0.30,0.22), ncol = 8, nrow = 1)
o1 <-matrix(o0[,-4:-9], nrow = 1, ncol = 3)
o2 <-matrix(o1[,-1], nrow = 1, ncol = 2)
source("funciones.R")
## 3.0
p1.1 <- perceptron(pimam,o0,"s2")
p1.2 <- perceptron(pimam,o0,"s3")
p1.3 <- perceptron(pimam,o0,"s4")
red3.0 <- matrix(c(as.vector(p1.1), as.vector(p1.2), as.vector(p1.3)), nrow = 768, ncol = 3)
library(pracma)
##3.1
p2.1 <-perceptron(red3.0,o1,"s1")
p2.2 <- perceptron(red3.0,o1,"s2")
red3.1 <- matrix(c(as.vector(p2.1), as.vector(p2.2)), nrow = 768, ncol = 2)
#3.2
p3.2 <- perceptron(red3.1, o2, "s4")
colors <- c("#e5b020", "#c9266a")
resANN <- as.data.frame(cbind(p3.2,pima[,9]))
plot(resANN$V1,
col = colors[resANN$V2],
pch = 19,
xlab = "Instancias",
ylab = "Valores",
main = "Resultados Finales ANN")
head(iris)
library(pracma)
o <- matrix(c(0.25,0.32,0.30,0.28), ncol = 4, nrow = 1) #pesos expresados como una matriz de 1x4.
x <-as.matrix(iris[,1:4]) #Conviertiendo los datos de Iris a matriz y excluyendo la variable objetivo.
ot <- t(o)
set.seed(123)
source("funciones.R")
perceptron<-function(x,o,fun){
switch(fun,
s1 = 1/(1+exp(x %*% (-2*t(o)))),
s2 = 1/(1+exp(x %*% (-1*t(o)))),
s3 = 1/(1+exp((x %*% (-1*t(o))))/2),
s4 = 1/(1+exp((x %*% (-1*t(o)))/3)),
v1 = abs(erf((sqrt(pi)/2)*x %*% t(o))),
v2 = abs(tanh(x %*% t(o))),
v3 = abs((x %*% t(o))/(sqrt(1+x^2 %*% t(o)))),
v4 = abs((2/pi)*atan((pi/2)*x %*% t(o)))
)
}
aP <- perceptron(xP,oP,"s1") #ejecutando la función con los datos de Iris.
set.seed(123)
source("funciones.R")
perceptron<-function(x,o,fun){
switch(fun,
s1 = 1/(1+exp(x %*% (-2*t(o)))),
s2 = 1/(1+exp(x %*% (-1*t(o)))),
s3 = 1/(1+exp((x %*% (-1*t(o))))/2),
s4 = 1/(1+exp((x %*% (-1*t(o)))/3)),
v1 = abs(erf((sqrt(pi)/2)*x %*% t(o))),
v2 = abs(tanh(x %*% t(o))),
v3 = abs((x %*% t(o))/(sqrt(1+x^2 %*% t(o)))),
v4 = abs((2/pi)*atan((pi/2)*x %*% t(o)))
)
}
aP <- perceptron(x,o,"s1") #ejecutando la función con los datos de Iris.
resP <- as.data.frame(cbind(aP,pima[,5])) #data.frame que contiene los valores resultado de la función de activación del perceptrón y el valor de la variable objetivo en la base de datos Iris.
colors <- c("#3498DB", "#F7DC6F", "#82E0AA")
resP$V2 <- as.factor(resP$V2)
plot(resP$V1,
col = colors[resP$V2],
pch = 19,
xlab = "Instancias",
ylab = "Valores",
main = "Clasificación Final por el Perceptrón")
#legend("topright", #inset = c(-0.2,0),
#      legend = c("Setosa","Versicolor", "Virginica"),
#     fill = c("#3498DB", "#F7DC6F", "#82E0AA"))
set.seed(123)
source("funciones.R")
perceptron<-function(x,o,fun){
switch(fun,
s1 = 1/(1+exp(x %*% (-2*t(o)))),
s2 = 1/(1+exp(x %*% (-1*t(o)))),
s3 = 1/(1+exp((x %*% (-1*t(o))))/2),
s4 = 1/(1+exp((x %*% (-1*t(o)))/3)),
v1 = abs(erf((sqrt(pi)/2)*x %*% t(o))),
v2 = abs(tanh(x %*% t(o))),
v3 = abs((x %*% t(o))/(sqrt(1+x^2 %*% t(o)))),
v4 = abs((2/pi)*atan((pi/2)*x %*% t(o)))
)
}
a <- perceptron(x,o,"v4") #ejecutando la función con los datos de Iris.
res <- as.data.frame(cbind(a,iris[,5])) #data.frame que contiene los valores resultado de la función de activación del perceptrón y el valor de la variable objetivo en la base de datos Iris.
colors <- c("#3498DB", "#F7DC6F", "#82E0AA")
res$V2 <- as.factor(res$V2)
plot(res$V1,
col = colors[res$V2],
pch = 19,
xlab = "Instancias",
ylab = "Valores",
main = "Clasificación Final por el Perceptrón")
#legend("topright", #inset = c(-0.2,0),
#      legend = c("Setosa","Versicolor", "Virginica"),
#     fill = c("#3498DB", "#F7DC6F", "#82E0AA"))
set.seed(123)
source("funciones.R")
perceptron<-function(x,o,fun){
switch(fun,
s1 = 1/(1+exp(x %*% (-2*t(o)))),
s2 = 1/(1+exp(x %*% (-1*t(o)))),
s3 = 1/(1+exp((x %*% (-1*t(o))))/2),
s4 = 1/(1+exp((x %*% (-1*t(o)))/3)),
v1 = abs(erf((sqrt(pi)/2)*x %*% t(o))),
v2 = abs(tanh(x %*% t(o))),
v3 = abs((x %*% t(o))/(sqrt(1+x^2 %*% t(o)))),
v4 = abs((2/pi)*atan((pi/2)*x %*% t(o)))
)
}
a <- perceptron(x,o,"v4") #ejecutando la función con los datos de Iris.
res <- as.data.frame(cbind(a,iris[,5])) #data.frame que contiene los valores resultado de la función de activación del perceptrón y el valor de la variable objetivo en la base de datos Iris.
colors <- c("#3498DB", "#F7DC6F", "#82E0AA")
res$V2 <- as.factor(res$V2)
plot(res$V1,
col = colors[res$V2],
pch = 19,
xlab = "Instancias",
ylab = "Valores",
main = "Clasificación Final por el Perceptrón")
legend("topright", #inset = c(-0.2,0),
legend = c("Setosa","Versicolor", "Virginica"),
fill = c("#3498DB", "#F7DC6F", "#82E0AA"))
set.seed(123)
source("funciones.R")
perceptron<-function(x,o,fun){
switch(fun,
s1 = 1/(1+exp(x %*% (-2*t(o)))),
s2 = 1/(1+exp(x %*% (-1*t(o)))),
s3 = 1/(1+exp((x %*% (-1*t(o))))/2),
s4 = 1/(1+exp((x %*% (-1*t(o)))/3)),
v1 = abs(erf((sqrt(pi)/2)*x %*% t(o))),
v2 = abs(tanh(x %*% t(o))),
v3 = abs((x %*% t(o))/(sqrt(1+x^2 %*% t(o)))),
v4 = abs((2/pi)*atan((pi/2)*x %*% t(o)))
)
}
a <- perceptron(x,o,"v4") #ejecutando la función con los datos de Iris.
res <- as.data.frame(cbind(a,iris[,5])) #data.frame que contiene los valores resultado de la función de activación del perceptrón y el valor de la variable objetivo en la base de datos Iris.
colors <- c("#3498DB", "#F7DC6F", "#82E0AA")
res$V2 <- as.factor(res$V2)
plot(res$V1,
col = colors[res$V2],
pch = 19,
xlab = "Instancias",
ylab = "Valores",
main = "Clasificación Final por el Perceptrón")
legend("bottomright", #inset = c(-0.2,0),
legend = c("Setosa","Versicolor", "Virginica"),
fill = c("#3498DB", "#F7DC6F", "#82E0AA"))
library(reshape2)
library(ggplot2)
testMelt <- melt(res, id.var = "V2")
testMelt$V2 <- as.factor(testMelt$V2)
g <- ggplot(testMelt,
aes(x = variable, y = value)) +
geom_boxplot(aes(fill = V2)) +
labs(title = "Valores Provistos por Perceptrón por Etiqueta en Base de Datos IRIS",
x = "Valores",
y = "Grupos",
caption = "Valores obtenidos de un perceptrón con una función de activación logística.")
g
library(mlbench)
data("PimaIndiansDiabetes")
pima <- PimaIndiansDiabetes
rm(PimaIndiansDiabetes)
library(data.table)
install.packages("datatable")
install.packages(data.table)
install.packages("data.table")
head(iris)
library(pracma)
o <- matrix(c(0.25,0.32,0.30,0.28), ncol = 4, nrow = 1) #pesos expresados como una matriz de 1x4.
x <-as.matrix(iris[,1:4]) #Conviertiendo los datos de Iris a matriz y excluyendo la variable objetivo.
ot <- t(o)
set.seed(123)
source("funciones.R")
perceptron<-function(x,o,fun){
switch(fun,
s1 = 1/(1+exp(x %*% (-2*t(o)))),
s2 = 1/(1+exp(x %*% (-1*t(o)))),
s3 = 1/(1+exp((x %*% (-1*t(o))))/2),
s4 = 1/(1+exp((x %*% (-1*t(o)))/3)),
v1 = abs(erf((sqrt(pi)/2)*x %*% t(o))),
v2 = abs(tanh(x %*% t(o))),
v3 = abs((x %*% t(o))/(sqrt(1+x^2 %*% t(o)))),
v4 = abs((2/pi)*atan((pi/2)*x %*% t(o)))
)
}
a <- perceptron(x,o,"v4") #ejecutando la función con los datos de Iris.
res <- as.data.frame(cbind(a,iris[,5])) #data.frame que contiene los valores resultado de la función de activación del perceptrón y el valor de la variable objetivo en la base de datos Iris.
colors <- c("#3498DB", "#F7DC6F", "#82E0AA")
res$V2 <- as.factor(res$V2)
plot(res$V1,
col = colors[res$V2],
pch = 19,
xlab = "Instancias",
ylab = "Valores",
main = "Clasificación Final por el Perceptrón")
legend("bottomright", #inset = c(-0.2,0),
legend = c("Setosa","Versicolor", "Virginica"),
fill = c("#3498DB", "#F7DC6F", "#82E0AA"))
library(reshape2)
library(ggplot2)
testMelt <- melt(res, id.var = "V2")
testMelt$V2 <- as.factor(testMelt$V2)
g <- ggplot(testMelt,
aes(x = variable, y = value)) +
geom_boxplot(aes(fill = V2)) +
labs(title = "Valores Provistos por Perceptrón por Etiqueta en Base de Datos IRIS",
x = "Valores",
y = "Grupos",
caption = "Valores obtenidos de un perceptrón con una función de activación logística.")
g
library(mlbench)
data("PimaIndiansDiabetes")
pima <- PimaIndiansDiabetes
rm(PimaIndiansDiabetes)
library(data.table)
heart <- fread('http://archive.ics.uci.edu/ml/machine-learning-databases/heart-disease/processed.cleveland.data')
heart <- as.data.frame(heart)
colnames(heart) <- c("age","sex","cp","trestbps","chol","fbs","restecg","thalach","exang","oldpeak","slope","ca","thal","num")
library(oro.nifti)
img <- readNIfTI("data/Template-T1-U8-RALPFH-BR.nii.gz", reorient = FALSE)
library(oro.nifti)
img <- readNIfTI("data/Template-T1-U8-RALPFH-BR.nii.gz", reorient = FALSE)
class(img)
dim(img)
image(img)
image(img, z = 225, plot.type = "single")
orthographic(img)
# skull stripping using FSL's Brain Extraction Tool (BET)
library(fslr)
install.packages("fslr")
# skull stripping using FSL's Brain Extraction Tool (BET)
library(fslr)
img_bet <- fslbet(infile = img, retimg = TRUE)
# skull stripping using FSL's Brain Extraction Tool (BET)
library(fslr)
img_bet <- fslbet(infile = img, retimg = TRUE)
orthographic(img)
# skull stripping using FSL's Brain Extraction Tool (BET)
library(fslr)
img_bet <- fslbet(infile = img, retimg = TRUE)
library(mlbench)
data("PimaIndiansDiabetes")
pima <- PimaIndiansDiabetes
rm(PimaIndiansDiabetes)
library(data.table)
heart <- fread('http://archive.ics.uci.edu/ml/machine-learning-databases/heart-disease/processed.cleveland.data')
heart <- as.data.frame(heart)
colnames(heart) <- c("age","sex","cp","trestbps","chol","fbs","restecg","thalach","exang","oldpeak","slope","ca","thal","num")
library(oro.nifti)
img <- readNIfTI("data/Template-T1-U8-RALPFH-BR.nii.gz", reorient = FALSE)
class(img)
dim(img)
image(img)
image(img, z = 225, plot.type = "single")
orthographic(img)
